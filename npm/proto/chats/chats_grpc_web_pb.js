/**
 * @fileoverview gRPC-Web generated client stub for chats
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: proto/chats/chats.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.chats = require('./chats_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chats.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chats.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chats.CreateChatRequest,
 *   !proto.chats.CreateChatResponse>}
 */
const methodDescriptor_ChatService_CreateChat = new grpc.web.MethodDescriptor(
  '/chats.ChatService/CreateChat',
  grpc.web.MethodType.UNARY,
  proto.chats.CreateChatRequest,
  proto.chats.CreateChatResponse,
  /**
   * @param {!proto.chats.CreateChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chats.CreateChatResponse.deserializeBinary
);


/**
 * @param {!proto.chats.CreateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chats.CreateChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chats.CreateChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chats.ChatServiceClient.prototype.createChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chats.ChatService/CreateChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateChat,
      callback);
};


/**
 * @param {!proto.chats.CreateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chats.CreateChatResponse>}
 *     Promise that resolves to the response
 */
proto.chats.ChatServicePromiseClient.prototype.createChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chats.ChatService/CreateChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chats.GetChatRequest,
 *   !proto.chats.GetChatResponse>}
 */
const methodDescriptor_ChatService_GetChat = new grpc.web.MethodDescriptor(
  '/chats.ChatService/GetChat',
  grpc.web.MethodType.UNARY,
  proto.chats.GetChatRequest,
  proto.chats.GetChatResponse,
  /**
   * @param {!proto.chats.GetChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chats.GetChatResponse.deserializeBinary
);


/**
 * @param {!proto.chats.GetChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chats.GetChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chats.GetChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chats.ChatServiceClient.prototype.getChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chats.ChatService/GetChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetChat,
      callback);
};


/**
 * @param {!proto.chats.GetChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chats.GetChatResponse>}
 *     Promise that resolves to the response
 */
proto.chats.ChatServicePromiseClient.prototype.getChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chats.ChatService/GetChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chats.UpdateChatRequest,
 *   !proto.chats.UpdateChatResponse>}
 */
const methodDescriptor_ChatService_UpdateChat = new grpc.web.MethodDescriptor(
  '/chats.ChatService/UpdateChat',
  grpc.web.MethodType.UNARY,
  proto.chats.UpdateChatRequest,
  proto.chats.UpdateChatResponse,
  /**
   * @param {!proto.chats.UpdateChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chats.UpdateChatResponse.deserializeBinary
);


/**
 * @param {!proto.chats.UpdateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chats.UpdateChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chats.UpdateChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chats.ChatServiceClient.prototype.updateChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chats.ChatService/UpdateChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_UpdateChat,
      callback);
};


/**
 * @param {!proto.chats.UpdateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chats.UpdateChatResponse>}
 *     Promise that resolves to the response
 */
proto.chats.ChatServicePromiseClient.prototype.updateChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chats.ChatService/UpdateChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_UpdateChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chats.DeleteChatRequest,
 *   !proto.chats.DeleteChatResponse>}
 */
const methodDescriptor_ChatService_DeleteChat = new grpc.web.MethodDescriptor(
  '/chats.ChatService/DeleteChat',
  grpc.web.MethodType.UNARY,
  proto.chats.DeleteChatRequest,
  proto.chats.DeleteChatResponse,
  /**
   * @param {!proto.chats.DeleteChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chats.DeleteChatResponse.deserializeBinary
);


/**
 * @param {!proto.chats.DeleteChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chats.DeleteChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chats.DeleteChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chats.ChatServiceClient.prototype.deleteChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chats.ChatService/DeleteChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_DeleteChat,
      callback);
};


/**
 * @param {!proto.chats.DeleteChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chats.DeleteChatResponse>}
 *     Promise that resolves to the response
 */
proto.chats.ChatServicePromiseClient.prototype.deleteChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chats.ChatService/DeleteChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_DeleteChat);
};


module.exports = proto.chats;

